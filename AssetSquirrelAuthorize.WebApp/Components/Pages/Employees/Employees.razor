@page "/employees"
@using AssetSquirrel.CoreBusiness.Dto
@using AssetSquirrel.UseCases.Employees.Interfaces

@inject IViewEmployeesUseCase ViewEmployeesUseCase
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<div class="row col-12">
    <div class="d-flex align-items-center gap-2">
        <button class="btn btn-sm btn-outline-dark" style="width: 10rem; margin: 0.5rem;" @onclick="(() => ShowModalAddEmployee())">
            <i class="bi bi-person-add"></i>
            Add employee
        </button>

        <TextSearchBar placeholderText="Code, MPK, City, Street"
                       TextSearchBarCallback="SearchLocationCallback">
        </TextSearchBar>
    </div>
</div>

<div class="row offset-1 col-10 mt-3">
    <div id="table-container">
        <table id="table-color" class="table table-bordered">
            <thead>
                <tr class="text-center">
                    <th scope="col"> Lp. </th>
                    <th scope="col"> Last name </th>
                    <th scope="col"> First name </th>
                    <th scope="col"> Employee code </th>
                    <th scope="col"> Email </th>
                    <th scope="col"> Phone number </th>
                    <th scope="col"> Is active? </th>
                    <th scope="col">
                        <i class="bi bi-gear"></i>
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (employees is not null && employees.Count() > 0)
                {
                    @foreach (var employee in employees)
                    {
                        <tr>
                            <td> 1 </td>
                            <td> @employee.LastName </td>
                            <td> @employee.FirstName </td>
                            <td> @employee.EmployeeCode </td>
                            <td> @employee.Email </td>
                            <td> @employee.PhoneNumber </td>
                            @if (employee.IsActive)
                            {
                                <td>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="(() => ChangeEmployeeIsActive(employee))" title="Dezaktywuj lokalizację.">
                                        <i class="bi bi-check-circle"></i>
                                    </button>
                                </td>
                            }
                            else
                            {
                                <td>
                                    <button class="btn btn-sm btn-outline-success" @onclick="(() => ChangeEmployeeIsActive(employee))" title="Aktywuj lokalizację.">
                                        <i class="bi bi-x-circle"></i>
                                    </button>
                                </td>
                            }
                            <td>
                                <button class="btn btn-sm btn-outline-warning" @onclick="(() => ShowModalEditEmployee(employee))" title="Edytuj dane lokalizacji.">
                                    <i class="bi bi-pen"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="(() => DeleteEmployee(employee))" title="Usuń lokalizację.">
                                    <i class="bi bi-trash3"></i>
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<DialogBox Show="modalAddEmployeeVisible"
Title="Add employee">
    <EmployeeAddDialogBox
    OnCancel="OnCancelHideModalAddEmployee"
    OnSave="OnSaveHideModalAddEmployee" />
</DialogBox>

<DialogBox Show="modalEditEmployeeVisible"
Title="Edit employee">
    <EmployeeEditDialogBox
    OnCancel="OnCancelHideModalEditEmployee"
    OnSave="OnSaveHideModalEditEmployee"
    Employee="employee" />
</DialogBox>

@code {
    string searchFilter = string.Empty;

    bool modalAddEmployeeVisible = false;
    bool modalEditEmployeeVisible = false;

    List<EmployeeDto> employees { get; set; }
    EmployeeDto employee { get; set; }

    protected override async Task OnInitializedAsync()
    {
        employees = await ViewEmployeesUseCase.GetEmployeesAsync(a => true);
    }

    public void OnCancelHideModalAddEmployee()
    {
        modalAddEmployeeVisible = false;
    }

    public async Task OnSaveHideModalAddEmployee(bool result)
    {
        if(result)
        {
            await JSRuntime.InvokeVoidAsync("OperationSuccessful", "Change saved.");
            await SearchEmployees();
            StateHasChanged();
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("OperationSuccessful", "Saving error.");
        }

        modalAddEmployeeVisible = false;
    }

    public void OnCancelHideModalEditEmployee()
    {
        modalEditEmployeeVisible = false;
    }

    public async Task OnSaveHideModalEditEmployee(bool result)
    {
        if(result)
        {
            await JSRuntime.InvokeVoidAsync("OperationSuccessful", "Change saved.");
            await SearchEmployees();
            StateHasChanged();
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("OperationSuccessful", "Saving error.");
        }

        modalEditEmployeeVisible = false;
    }

    public async Task SearchEmployees()
    {
        employees = await ViewEmployeesUseCase.GetEmployeesAsync(
            a => a.FirstName.ToLower().Contains(this.searchFilter) ||
            a.LastName.ToLower().Contains(this.searchFilter) ||
            a.EmployeeCode.ToLower().Contains(this.searchFilter)
        );

        StateHasChanged();
    }

    public async void SearchLocationCallback(string searchFilter)
    {
        this.searchFilter = searchFilter;
        await SearchEmployees();
    }

    public void ShowModalAddEmployee()
    {
        modalAddEmployeeVisible = true;
    }

    public void ShowModalEditEmployee(EmployeeDto employee)
    {
        modalEditEmployeeVisible = true;

    }

    public async Task ChangeEmployeeIsActive(EmployeeDto employee)
    {
        employee.IsActive = !employee.IsActive;

        if(await ViewEmployeesUseCase.UpdateEmployee(employee))
        {
            await JSRuntime.InvokeVoidAsync("OperationSuccessful", "Location removed.");
            StateHasChanged();
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("OperationSuccessful", "Saving error.");
        }
    }

    public async Task DeleteEmployee(EmployeeDto employee)
    {
        if(await ViewEmployeesUseCase.DeleteEmployeeAsync(employee))
        {
            await JSRuntime.InvokeVoidAsync("OperationSuccessful", "Location removed.");
            await SearchEmployees();
            StateHasChanged();
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("OperationSuccessful", "Error.");
        }
    }
}
