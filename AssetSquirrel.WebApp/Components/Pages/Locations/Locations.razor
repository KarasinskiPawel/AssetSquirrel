@page "/locations"

@using AssetSquirrel.CoreBusiness
@using AssetSquirrel.UseCases.Locations.Interfaces
@using AssetSquirrel.UseCases.PluginInterfaces
@using AssetSquirrel.UseCases.Mapper
@using System.Diagnostics

@inject IViewLocationsUseCase ViewLocationsUseCase
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<div class="row col-12">
    <div class="d-flex align-items-center gap-2">
        <button class="btn btn-sm btn-outline-dark" style="width: 10rem; margin: 0.5rem;" @onclick="(() => ShowModalAddLocation())">
            <i class="bi bi-house-add"></i>
            Add location
        </button>

        <TextSearchBar 
            placeholderText="Code, MPK, City, Street"
                       TextSearchBarCallback="SearchLocationCallback">
        </TextSearchBar>
    </div>
</div>

<div class="row offset-1 col-10 mt-3">
    <div id="table-container">
        <table id="table-color" class="table table-bordered">
            <thead>
                <tr class="text-center">
                    <th scope="col"> Lp. </th>
                    <th scope="col"> Code </th>
                    <th scope="col"> MPK </th>
                    <th scope="col"> City </th>
                    <th scope="col"> Street </th>
                    <th scope="col"> Email </th>
                    <th scope="col"> Phone number </th>
                    <th scope="col"> Is active? </th>
                    <th scope="col">
                        <i class="bi bi-gear"></i>
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (locations is not null && locations.Count() > 0)
                {
                    @foreach(var location in locations)
                    {
                        <tr>
                            <td> 1 </td>
                            <td> @location.Code </td>
                            <td> @location.MPK </td>
                            <td> @location.City </td>
                            <td> @location.Street </td>
                            <td> @location.Email </td>
                            <td> @location.PhoneNumber </td>
                            @if (location.IsActive)
                            {
                                <td>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="(() => ChangeLocationIsActive(location))" title="Dezaktywuj lokalizację.">
                                        <i class="bi bi-check-circle"></i>
                                    </button>
                                </td>
                            }
                            else
                            {
                                <td>
                                    <button class="btn btn-sm btn-outline-success" @onclick="(() => ChangeLocationIsActive(location))" title="Aktywuj lokalizację.">
                                        <i class="bi bi-x-circle"></i>
                                    </button>
                                </td>
                            }
                            <td>
                                <button class="btn btn-sm btn-outline-warning" @onclick="(() => ShowModalEditLocation(location))" title="Edytuj dane lokalizacji.">
                                    <i class="bi bi-pen"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="(() => DeleteLocation(location))" title="Usuń lokalizację.">
                                    <i class="bi bi-trash3"></i>
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<DialogBox Show="modalAddLocation"
Title="Add location">
    <LocationAddDialogBox
    OnCancel="OnCancelHideModalAddLocation"
    OnSave="OnSaveHideModalAddLocation" />
</DialogBox>

<DialogBox Show="modalEditLocation"
Title="Edit location">
    <LocationEditDialogBox
    OnCancel="OnCancelHideModalEditLocation"
    OnSave="OnSaveHideModalEditLocation"
    Location="Location" />
</DialogBox>

@code {
    bool modalAddLocation = false;
    bool modalEditLocation = false;

    string searchFilter = string.Empty;

    List<LocationDto> locations { get; set; }
    LocationDto Location { get; set; }

    protected override async Task OnInitializedAsync()
    {
        locations = await ViewLocationsUseCase.GetLocationsAsync(a => true);
    }

    public async void SearchLocationCallback(string searchFilter)
    {
        this.searchFilter = searchFilter;
        await SearchLocations();
    }

    public async Task SearchLocations()
    {
        locations = await ViewLocationsUseCase.GetLocationsAsync(
                a => a.Code.ToLower().Contains(searchFilter) ||
                a.MPK.ToLower().Contains(searchFilter) ||
                a.City.ToLower().Contains(searchFilter) ||
                a.Street.ToLower().Contains(searchFilter)
            );

        StateHasChanged();
    }

    public async Task ChangeLocationIsActive(LocationDto location){
        location.IsActive = !location.IsActive;

        if (await ViewLocationsUseCase.UpdateLocationAsync(location))
        {
            await JSRuntime.InvokeVoidAsync("OperationSuccessful", "Change saved.");
            StateHasChanged();
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("OperationSuccessful", "Saving error.");
        }
    }

    public void ShowModalEditLocation(LocationDto location){
        Location = location;
        modalEditLocation = true;
    }

    public void OnCancelHideModalEditLocation(){
        modalEditLocation = false;
    }

    public async Task OnSaveHideModalEditLocation(bool result)
    {
        if(result){
            await JSRuntime.InvokeVoidAsync("OperationSuccessful", "Change saved.");
            StateHasChanged();
        } else {
            await JSRuntime.InvokeVoidAsync("OperationSuccessful", "Saving error.");
        }

        modalEditLocation = false;       
    }

    public async void DeleteLocation(LocationDto location){
        if(await ViewLocationsUseCase.DeleteLocationAync(location)){
            await JSRuntime.InvokeVoidAsync("OperationSuccessful", "Location removed.");
            await SearchLocations();
            StateHasChanged();
        } else {
            await JSRuntime.InvokeVoidAsync("OperationSuccessful", "Error.");
        }
    }

    public void ShowModalAddLocation(){
        modalAddLocation = true;
    }

    public void OnCancelHideModalAddLocation()
    {
        modalAddLocation = false;
    }

    public async Task OnSaveHideModalAddLocation(bool result)
    {
        if (result)
        {
            await JSRuntime.InvokeVoidAsync("OperationSuccessful", "Change saved.");
            await SearchLocations();
            StateHasChanged();
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("OperationSuccessful", "Saving error.");
        }

        modalAddLocation = false;
    }
}
